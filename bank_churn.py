# -*- coding: utf-8 -*-
"""Bank Churn.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1O3SWjO7hbx95YN62RobtNqdKQdmMfwyt
"""

import pandas as pd
import numpy as np
from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

data_frame = pd.read_csv("/content/Customer-Churn-Records.csv")

data_frame.head()

data_frame.shape

data_frame.isnull().sum()

data_frame.duplicated().sum()

data_frame.drop(columns=['RowNumber', 'CustomerId', 'Surname'], inplace=True)

data_frame

data_frame['Gender'].value_counts()

data_frame['Geography'].value_counts()

data_frame['Card Type'].value_counts()

data_frame = pd.get_dummies(data_frame, columns=['Gender', 'Geography', 'Card Type'], prefix=['Gender_', 'Geography_', 'Card Type_'])
data_frame.head()

scaler = MinMaxScaler()
scaled_data = scaler.fit_transform(data_frame)
scaled_data

scaled_data_frame = pd.DataFrame(scaled_data, columns=data_frame.columns)
scaled_data_frame

X = scaled_data_frame.drop(columns=['Exited'])
y = scaled_data_frame['Exited']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
print("Shape of X_train:", X_train.shape)
print("Shape of X_test:", X_test.shape)
print("Shape of y_train:", y_train.shape)
print("Shape of y_test:", y_test.shape)

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense

model = Sequential()

model.add(Dense(5, input_dim=20, activation='relu'))
model.add(Dense(3, input_dim=20, activation='relu'))
model.add(Dense(1, activation='sigmoid'))

model.summary()

# Compile the model
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# Fit the model
history = model.fit(X_train, y_train, epochs=15, batch_size=100, validation_split=0.2)

predictions = model.predict(X_test)
predicted_classes = np.where(predictions > 0.5, 1, 0)

predicted_classes

# Calculate the accuracy
accuracy = accuracy_score(y_test, predicted_classes)

# Print the accuracy
print("Accuracy:", accuracy)

history.history

import matplotlib.pyplot as plt
# Plot the training and validation accuracy
plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('Model Accuracy')
plt.ylabel('Accuracy')
plt.xlabel('Epoch')
plt.legend(['Train', 'Validation'], loc='lower right')
plt.show()

plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Model Loss')
plt.ylabel('Loss')
plt.xlabel('Epoch')
plt.legend(['Train', 'Validation'], loc='upper right')
plt.show()

